Q) find how many solutions exist to the equation : a + b + c ≤ N, such that 0 ≤ a ≤ A, 0 ≤ b ≤ B, 0 ≤ c ≤ C.

#include <stdio.h>
long int NumT(long int n)
{
    if(n<0)
        return 0;
    long int x=((n+1)*(n+2)*(n+3));
    return x/6;
}

int main(void) {
	int t,N,A,B,C,a,b,c;
	long int x;
	scanf("%d",&t);
	while(t--)
	{
	    scanf("%d %d %d %d",&N,&A,&B,&C);
	    a=A+1;
	    b=B+1;
	    c=C+1;
      //Inclusion Exclusion Priciple is applied,i.e,|A U B U C|=|A|+|B|+|C|-|A I B|-|A I C|-|B I C|+|A I B I C|. I:Intersection, U:Union
      //NumT(N) will find how many possible term that will satisfy the equation if the NumT(N-a) responsible for only a and so on.
      //Numt() function is basically (N+3)C(3)
	    x=NumT(N)-NumT(N-a)-NumT(N-b)-NumT(N-c)+NumT(N-a-b)+NumT(N-a-c)+NumT(N-b-c)-NumT(N-a-b-c);
	    printf("%ld\n",x);
	}
	return 0;
}
